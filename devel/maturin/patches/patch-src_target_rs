$OpenBSD: patch-src_target_rs,v 1.1 2021/06/21 21:07:31 sthen Exp $

Support i386 and Aarch64 targets

Index: src/target.rs
--- src/target.rs.orig
+++ src/target.rs
@@ -74,7 +74,7 @@ fn get_supported_architectures(os: &Os) -> Vec<Arch> {
         Os::Windows => vec![Arch::X86, Arch::X86_64, Arch::Aarch64],
         Os::Macos => vec![Arch::Aarch64, Arch::X86_64],
         Os::FreeBsd => vec![Arch::X86_64],
-        Os::OpenBsd => vec![Arch::X86_64],
+        Os::OpenBsd => vec![Arch::X86, Arch::X86_64, Arch::Aarch64],
     }
 }
 
@@ -150,6 +150,14 @@ impl Target {
                 let release = info.release().replace(".", "_").replace("-", "_");
                 format!("freebsd_{}_amd64", release)
             }
+            (Os::OpenBsd, Arch::X86) => {
+                let info = match PlatformInfo::new() {
+                    Ok(info) => info,
+                    Err(error) => panic!("{}", error),
+                };
+                let release = info.release().replace(".", "_").replace("-", "_");
+                format!("openbsd_{}_i386", release)
+            }
             (Os::OpenBsd, Arch::X86_64) => {
                 let info = match PlatformInfo::new() {
                     Ok(info) => info,
@@ -157,6 +165,14 @@ impl Target {
                 };
                 let release = info.release().replace(".", "_").replace("-", "_");
                 format!("openbsd_{}_amd64", release)
+            }
+            (Os::OpenBsd, Arch::Aarch64) => {
+                let info = match PlatformInfo::new() {
+                    Ok(info) => info,
+                    Err(error) => panic!("{}", error),
+                };
+                let release = info.release().replace(".", "_").replace("-", "_");
+                format!("openbsd_{}_arm64", release)
             }
             (Os::Linux, _) => {
                 let mut tags = vec![format!("{}_{}", manylinux, self.arch)];
