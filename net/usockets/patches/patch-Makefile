$OpenBSD: patch-Makefile,v 1.3 2020/12/11 22:33:22 sthen Exp $

add shared + static lib + pkg-config file
remove -flto -O3

Index: Makefile
--- Makefile.orig
+++ Makefile
@@ -1,60 +1,40 @@
-# WITH_OPENSSL=1 enables OpenSSL 1.1+ support or BoringSSL
-# For now we need to link with C++ for OpenSSL support, but should be removed with time
-ifeq ($(WITH_OPENSSL),1)
-	override CFLAGS += -DLIBUS_USE_OPENSSL
-	# With problems on macOS, make sure to pass needed LDFLAGS required to find these
-	override LDFLAGS += -lssl -lcrypto -lstdc++
-else
-	# WITH_WOLFSSL=1 enables WolfSSL 4.2.0 support (mutually exclusive with OpenSSL)
-	ifeq ($(WITH_WOLFSSL),1)
-		# todo: change these
-		override CFLAGS += -DLIBUS_USE_WOLFSSL -I/usr/local/include
-		override LDFLAGS += -L/usr/local/lib -lwolfssl
-	else
-		override CFLAGS += -DLIBUS_NO_SSL
-	endif
-endif
+DESTDIR ?=
 
-# WITH_LIBUV=1 builds with libuv as event-loop
-ifeq ($(WITH_LIBUV),1)
-	override CFLAGS += -DLIBUS_USE_LIBUV
-	override LDFLAGS += -luv
-endif
+PREFIX ?=	"/usr/local"
+LIBDIR ?=	"$(PREFIX)/lib"
+INCLUDEDIR ?=	"$(PREFIX)/include"
 
-# WITH_GCD=1 builds with libdispatch as event-loop
-ifeq ($(WITH_GCD),1)
-	override CFLAGS += -DLIBUS_USE_GCD
-	override LDFLAGS += -framework CoreFoundation
-endif
+# OpenBSD specific library version
+LIBTARGET ?=	libusockets.so.$(LIBusockets_VERSION)
 
-# WITH_ASAN builds with sanitizers
-ifeq ($(WITH_ASAN),1)
-	override CFLAGS += -fsanitize=address -g
-	override LDFLAGS += -lasan
-endif
+PKG_CONFIG ?=	pkg-config
 
-override CFLAGS += -std=c11 -Isrc
-override LDFLAGS += uSockets.a
+override LDFLAGS +=	-lstdc++ -lcrypto -lssl `$(PKG_CONFIG) --libs libuv`
 
-# By default we build the uSockets.a static library
-default:
-	rm -f *.o
-	$(CC) $(CFLAGS) -flto -O3 -c src/*.c src/eventing/*.c src/crypto/*.c
-# For now we do rely on C++17 for OpenSSL support but we will be porting this work to C11
-ifeq ($(WITH_OPENSSL),1)
-	$(CXX) $(CXXFLAGS) -std=c++17 -flto -O3 -c src/crypto/*.cpp
-endif
-	$(AR) rvs uSockets.a *.o
+COMMON_FLAGS =	-DLIBUS_USE_OPENSSL -DLIBUS_USE_LIBUV -Isrc `$(PKG_CONFIG) --cflags libuv`
+override CFLAGS +=	$(COMMON_FLAGS)
+override CXXFLAGS +=	$(COMMON_FLAGS)
 
-# Builds all examples
-.PHONY: examples
-examples: default
-	for f in examples/*.c; do $(CC) -flto -O3 $(CFLAGS) -o $$(basename "$$f" ".c") "$$f" $(LDFLAGS); done
+all:
+	$(CC) -std=c11 -fPIC $(CFLAGS) -c src/*.c src/eventing/*.c src/crypto/*.c
+	$(CXX) -std=c++17 -fPIC $(CXXFLAGS) -c src/crypto/*.cpp
+	$(AR) rvs libusockets.a *.o
+	$(CC) -shared -o $(LIBTARGET) *.o -Wl,-soname,$(LIBTARGET) $(LDFLAGS)
+	sed -e "s:@PREFIX@:$(PREFIX):" -e "s:@VERSION@:$(LIBusockets_VERSION):" \
+		libusockets.pc.in > libusockets.pc
 
-swift_examples:
-	swiftc -O -I . examples/swift_http_server/main.swift uSockets.a -o swift_http_server
+install:
+	install -d "$(LIBDIR)/pkgconfig" "$(INCLUDEDIR)"
+	install -m 644 src/libusockets.h "$(INCLUDEDIR)"
+	install -m 755 $(LIBTARGET) "$(LIBDIR)"
+	install -m 755 libusockets.a "$(LIBDIR)"
+	install -m 644 libusockets.pc "$(LIBDIR)/pkgconfig"
 
 clean:
 	rm -f *.o
 	rm -f *.a
-	rm -rf .certs
+	rm -f *.so
+	rm -f libusockets.pc
+
+.PHONY: all install clean
+
