$OpenBSD: patch-src_pdf_pdfimage_cpp,v 1.2 2020/09/12 12:40:10 rsadowski Exp $

Starting with poppler-20, POPPLER_VERSION no longer is numeric -- it's
what POPPLER_VERSION_STRING was in earlier releases.

Index: src/pdf/pdfimage.cpp
--- src/pdf/pdfimage.cpp.orig
+++ src/pdf/pdfimage.cpp
@@ -24,54 +24,7 @@
 using namespace KItinerary;
 
 #ifdef HAVE_POPPLER
-// legacy image loading
-#if KPOPPLER_VERSION < QT_VERSION_CHECK(0, 69, 0)
-namespace KItinerary {
-class ImageLoaderOutputDevice : public OutputDev
-{
-public:
-    ImageLoaderOutputDevice(PdfImagePrivate *dd);
 
-    bool interpretType3Chars() override { return false; }
-    bool needNonText() override { return true; }
-    bool upsideDown() override { return false; }
-    bool useDrawChar() override { return false; }
-
-    void drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, bool interpolate, int *maskColors, bool inlineImg) override;
-    QImage image() const { return m_image; }
-
-private:
-    PdfImagePrivate *d;
-    QImage m_image;
-};
-
-ImageLoaderOutputDevice::ImageLoaderOutputDevice(PdfImagePrivate* dd)
-    : d(dd)
-{
-}
-
-void ImageLoaderOutputDevice::drawImage(GfxState *state, Object *ref, Stream *str, int width, int height, GfxImageColorMap *colorMap, bool interpolate, int *maskColors, bool inlineImg)
-{
-    Q_UNUSED(state);
-    Q_UNUSED(height);
-    Q_UNUSED(width);
-    Q_UNUSED(interpolate);
-    Q_UNUSED(maskColors);
-    Q_UNUSED(inlineImg);
-
-    if (!colorMap || !colorMap->isOk() || !ref) {
-        return;
-    }
-
-    if (ref->isRef() && d->m_refNum != ref->getRef().num) {
-        return;
-    }
-
-    m_image = d->load(str, colorMap);
-}
-}
-#endif
-
 static inline bool isColor(GfxRGB rgb)
 {
     enum { Threshold = 72 * 256 }; // GfxComp is stored as color value * 255
@@ -140,16 +93,9 @@ QImage PdfImagePrivate::load()
 #ifdef HAVE_POPPLER
     PopplerGlobalParams gp;
 
-#if KPOPPLER_VERSION >= QT_VERSION_CHECK(0, 69, 0)
     const auto xref = m_page->m_doc->m_popplerDoc->getXRef();
     const auto obj = xref->fetch(m_refNum, m_refGen);
     return load(obj.getStream(), m_colorMap.get());
-#else
-    std::unique_ptr<ImageLoaderOutputDevice> device(new ImageLoaderOutputDevice(this));
-    m_page->m_doc->m_popplerDoc->displayPageSlice(device.get(), m_page->m_pageNum + 1, 72, 72, 0, false, true, false, -1, -1, -1, -1);
-    return device->image();
-#endif
-
 #else
     return {};
 #endif
