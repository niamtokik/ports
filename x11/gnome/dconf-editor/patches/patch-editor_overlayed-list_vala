$OpenBSD: patch-editor_overlayed-list_vala,v 1.1 2021/03/01 09:52:31 ajacoutot Exp $

From fdc90849223649509424bbefe14990de71db2b2b Mon Sep 17 00:00:00 2001
From: Rico Tzschichholz <ricotz@ubuntu.com>
Date: Sat, 16 Jan 2021 13:26:32 +0100
Subject: [PATCH] Don't alter or try to write GtkChild fields

Index: editor/overlayed-list.vala
--- editor/overlayed-list.vala.orig
+++ editor/overlayed-list.vala
@@ -89,11 +89,11 @@ private abstract class OverlayedList : Overlay, Adapta
     internal void set_window_size (AdaptativeWidget.WindowSize new_size)
     {
         if (!AdaptativeWidget.WindowSize.is_extra_thin (new_size) && AdaptativeWidget.WindowSize.is_extra_flat (new_size))
-            set_horizontal (ref main_context, ref edit_mode_box);
+            set_horizontal (ref main_context, edit_mode_box);
         else
-            set_vertical (ref main_context, ref edit_mode_box);
+            set_vertical (ref main_context, edit_mode_box);
     }
-    private static inline void set_horizontal (ref StyleContext main_context, ref Box edit_mode_box)
+    private static inline void set_horizontal (ref StyleContext main_context, Box edit_mode_box)
     {
         main_context.remove_class ("vertical");
         edit_mode_box.halign = Align.END;
@@ -102,7 +102,7 @@ private abstract class OverlayedList : Overlay, Adapta
         edit_mode_box.width_request = 160;
         main_context.add_class ("horizontal");
     }
-    private static inline void set_vertical (ref StyleContext main_context, ref Box edit_mode_box)
+    private static inline void set_vertical (ref StyleContext main_context, Box edit_mode_box)
     {
         main_context.remove_class ("horizontal");
         edit_mode_box.halign = Align.CENTER;
@@ -118,9 +118,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     internal bool next_match ()
     {
-        return _next_match (ref main_list_box);
+        return _next_match (main_list_box);
     }
-    private static inline bool _next_match (ref ListBox main_list_box)
+    private static inline bool _next_match (ListBox main_list_box)
     {
         ListBoxRow? row = main_list_box.get_selected_row ();    // TODO multiple rows and focus-only lists
         if (row == null)
@@ -130,7 +130,7 @@ private abstract class OverlayedList : Overlay, Adapta
 
         if (row == null)
         {
-            _scroll_bottom (ref main_list_box);
+            _scroll_bottom (main_list_box);
             return false;
         }
         main_list_box.select_row ((!) row);
@@ -140,9 +140,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     internal bool previous_match ()
     {
-        return _previous_match (ref main_list_box);
+        return _previous_match (main_list_box);
     }
-    private static inline bool _previous_match (ref ListBox main_list_box)
+    private static inline bool _previous_match (ListBox main_list_box)
     {
         uint n_items = main_list_box.get_children ().length ();  // FIXME OverlayedList.n_items is unreliable
         if (n_items == 0)
@@ -189,9 +189,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     protected int [] get_selected_rows_indices ()
     {
-        return _get_selected_rows_indices (ref main_list_box);
+        return _get_selected_rows_indices (main_list_box);
     }
-    private static inline int [] _get_selected_rows_indices (ref ListBox main_list_box)
+    private static inline int [] _get_selected_rows_indices (ListBox main_list_box)
     {
         int [] indices = new int [0];
         main_list_box.selected_foreach ((_list_box, selected_row) => {
@@ -205,9 +205,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     protected void scroll_top ()
     {
-        _scroll_top (ref main_list_box);
+        _scroll_top (main_list_box);
     }
-    private static inline void _scroll_top (ref ListBox main_list_box)
+    private static inline void _scroll_top (ListBox main_list_box)
     {
         Adjustment adjustment = main_list_box.get_adjustment ();
         adjustment.set_value (adjustment.get_lower ());
@@ -215,9 +215,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     protected void scroll_bottom ()
     {
-        _scroll_bottom (ref main_list_box);
+        _scroll_bottom (main_list_box);
     }
-    private static inline void _scroll_bottom (ref ListBox main_list_box)
+    private static inline void _scroll_bottom (ListBox main_list_box)
     {
         Adjustment adjustment = main_list_box.get_adjustment ();
         adjustment.set_value (adjustment.get_upper ());
@@ -225,9 +225,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     internal bool handle_copy_text (out string copy_text)
     {
-        return _handle_copy_text (out copy_text, ref main_list_box);
+        return _handle_copy_text (out copy_text, main_list_box);
     }
-    private static inline bool _handle_copy_text (out string copy_text, ref ListBox main_list_box)
+    private static inline bool _handle_copy_text (out string copy_text, ListBox main_list_box)
     {
         List<weak ListBoxRow> selected_rows = main_list_box.get_selected_rows ();
         OverlayedListRow row;
@@ -283,9 +283,9 @@ private abstract class OverlayedList : Overlay, Adapta
 
     internal SelectionState get_selection_state ()
     {
-        return _get_selection_state (ref main_list_box, ref main_list_store);
+        return _get_selection_state (main_list_box, ref main_list_store);
     }
-    private static inline SelectionState _get_selection_state (ref ListBox main_list_box, ref GLib.ListStore main_list_store)
+    private static inline SelectionState _get_selection_state (ListBox main_list_box, ref GLib.ListStore main_list_store)
     {
         List<weak ListBoxRow> selected_rows = main_list_box.get_selected_rows ();
         uint n_selected_rows = selected_rows.length ();
