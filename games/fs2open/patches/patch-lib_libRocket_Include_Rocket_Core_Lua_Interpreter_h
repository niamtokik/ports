$OpenBSD: patch-lib_libRocket_Include_Rocket_Core_Lua_Interpreter_h,v 1.1 2020/09/17 12:34:22 thfr Exp $

_L -> _LuaState to avoid clash with macro in ctype.h

Index: lib/libRocket/Include/Rocket/Core/Lua/Interpreter.h
--- lib/libRocket/Include/Rocket/Core/Lua/Interpreter.h.orig
+++ lib/libRocket/Include/Rocket/Core/Lua/Interpreter.h
@@ -103,7 +103,7 @@ class ROCKETLUA_API Interpreter : public Plugin (publi
 	 must call lua_close yourself or if you need to continue to use the lua_State pointer provided here.  Internally, it calls
 	 Interpreter::Startup() and registers the "body" tag to generate a LuaDocument rather than a Rocket::Core::ElementDocument.
 	 If the argument provided is NULL, a Lua context is created automatically instead. */
-    static void Initialise(lua_State *_L);
+    static void Initialise(lua_State *_LuaState);
 
     /** Stops the plugin by calling lua_close
 	 @remark Shutdown calls lua_Close on the lua_State associated with the Interpreter.  If a lua_State was provided in the
@@ -118,12 +118,12 @@ class ROCKETLUA_API Interpreter : public Plugin (publi
     @sa Rocket::Core::Plugin::OnShutdown    */
     virtual void OnShutdown();
 private:
-    /** Creates a lua_State for @var _L and calls luaL_openlibs, then calls Interpreter::RegisterCoreTypes(lua_State*)
+    /** Creates a lua_State for @var _LuaState and calls luaL_openlibs, then calls Interpreter::RegisterCoreTypes(lua_State*)
     @remark called by Interpreter::Initialise()    */
     void Startup();
 
     /** Lua state that Interpreter::Initialise() creates.    */
-    static lua_State* _L;
+    static lua_State* _LuaState;
 };
 }
 }
