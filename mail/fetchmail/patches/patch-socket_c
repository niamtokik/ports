$OpenBSD: patch-socket_c,v 1.13 2020/09/14 15:14:55 tb Exp $

Index: socket.c
--- socket.c.orig
+++ socket.c
@@ -902,7 +902,7 @@ static const char *SSLCertGetCN(const char *mycert,
 	return ret;
 }
 
-#if defined(LIBRESSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x1010000fL
+#if OPENSSL_VERSION_NUMBER < 0x1010000fL
 /* OSSL_proto_version_logic for OpenSSL 1.0.x and LibreSSL */
 static int OSSL10X_proto_version_logic(int sock, const char **myproto, int *avoid_ssl_versions)
 {
@@ -1149,6 +1149,10 @@ int SSLOpen(int sock, char *mycert, char *mykey, const
 	/* Check which trusted X.509 CA certificate store(s) to load */
 	{
 		char *tmp;
+#if defined(X509_V_FLAG_LEGACY_VERIFY)
+		X509_VERIFY_PARAM *param;
+		int flags;
+#endif
 		int want_default_cacerts = 0;
 
 		/* Load user locations if any is given */
@@ -1162,6 +1166,13 @@ int SSLOpen(int sock, char *mycert, char *mykey, const
 		if (want_default_cacerts || (tmp && tmp[0])) {
 			SSL_CTX_set_default_verify_paths(_ctx[sock]);
 		}
+#if defined(X509_V_FLAG_LEGACY_VERIFY)
+		if ((param = SSL_CTX_get0_param(_ctx[sock])) != NULL) {
+			flags = X509_VERIFY_PARAM_get_flags(param);
+			flags |= X509_V_FLAG_LEGACY_VERIFY;
+			X509_VERIFY_PARAM_set_flags(param, flags);
+		}
+#endif
 	}
 	
 	_ssl_context[sock] = SSL_new(_ctx[sock]);
