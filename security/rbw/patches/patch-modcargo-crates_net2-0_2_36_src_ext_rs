$OpenBSD: patch-modcargo-crates_net2-0_2_36_src_ext_rs,v 1.1.1.1 2021/01/30 19:16:45 abieber Exp $

https://github.com/deprecrated/net2-rs/pull/99

Index: modcargo-crates/net2-0.2.36/src/ext.rs
--- modcargo-crates/net2-0.2.36/src/ext.rs.orig
+++ modcargo-crates/net2-0.2.36/src/ext.rs
@@ -668,8 +668,11 @@ impl<T: AsRawSocket> AsSock for T {
 cfg_if! {
     if #[cfg(any(target_os = "macos", target_os = "ios"))] {
         use libc::TCP_KEEPALIVE as KEEPALIVE_OPTION;
-    } else if #[cfg(any(target_os = "haiku", target_os = "netbsd", target_os = "openbsd"))] {
+    } else if #[cfg(any(target_os = "haiku", target_os = "netbsd"))] {
         use libc::SO_KEEPALIVE as KEEPALIVE_OPTION;
+    } else if #[cfg(target_os = "openbsd")] {
+        // OpenBSD does not have a TCP_KEEPIDLE setsockopt (as of release 6.6).
+        // The sysctl variable net.inet.tcp.keepidle controls the setting globally.
     } else if #[cfg(unix)] {
         use libc::TCP_KEEPIDLE as KEEPALIVE_OPTION;
     } else if #[cfg(target_os = "redox")] {
@@ -738,7 +741,7 @@ impl TcpStreamExt for TcpStream {
         Ok(Some((secs as u32) * 1000))
     }
 
-    #[cfg(unix)]
+    #[cfg(all(unix, not(target_os = "openbsd")))]
     fn set_keepalive_ms(&self, keepalive: Option<u32>) -> io::Result<()> {
         try!(set_opt(self.as_sock(), SOL_SOCKET, SO_KEEPALIVE,
                     keepalive.is_some() as c_int));
@@ -749,7 +752,7 @@ impl TcpStreamExt for TcpStream {
         Ok(())
     }
 
-    #[cfg(unix)]
+    #[cfg(all(unix, not(target_os = "openbsd")))]
     fn keepalive_ms(&self) -> io::Result<Option<u32>> {
         let keepalive = try!(get_opt::<c_int>(self.as_sock(), SOL_SOCKET,
                                              SO_KEEPALIVE));
@@ -761,7 +764,25 @@ impl TcpStreamExt for TcpStream {
         Ok(Some((secs as u32) * 1000))
     }
 
-     #[cfg(target_os = "wasi")]
+    #[cfg(target_os = "openbsd")]
+    fn set_keepalive_ms(&self, keepalive: Option<u32>) -> io::Result<()> {
+        set_opt(self.as_sock(), SOL_SOCKET, SO_KEEPALIVE,
+                    keepalive.is_some() as c_int)?;
+        Ok(())
+    }
+
+    #[cfg(target_os = "openbsd")]
+    fn keepalive_ms(&self) -> io::Result<Option<u32>> {
+        let keepalive = get_opt::<c_int>(self.as_sock(), SOL_SOCKET,
+                                             SO_KEEPALIVE)?;
+        if keepalive == 0 {
+            return Ok(None)
+        } else {
+            return Ok(Some(1u32))
+        }
+    }
+
+    #[cfg(target_os = "wasi")]
     fn set_keepalive_ms(&self, _keepalive: Option<u32>) -> io::Result<()> {
         unimplemented!()
     }
