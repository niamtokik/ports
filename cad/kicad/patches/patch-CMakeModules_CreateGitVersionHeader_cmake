$OpenBSD: patch-CMakeModules_CreateGitVersionHeader_cmake,v 1.1 2021/02/19 14:48:58 tracey Exp $

# set build version without git

Index: CMakeModules/CreateGitVersionHeader.cmake
--- CMakeModules/CreateGitVersionHeader.cmake.orig
+++ CMakeModules/CreateGitVersionHeader.cmake
@@ -24,31 +24,31 @@
 
 macro( create_git_version_header _git_src_path )
     # Include Git support to automagically create version header file.
-    find_package( Git )
+    # find_package( Git )
 
-    if( GIT_FOUND )
-        message( STATUS "Using Git to determine build version string." )
+    # if( GIT_FOUND )
+    #     message( STATUS "Using Git to determine build version string." )
 
-        set( _Git_SAVED_LC_ALL "$ENV{LC_ALL}" )
-        set( ENV{LC_ALL} C )
+    #     set( _Git_SAVED_LC_ALL "$ENV{LC_ALL}" )
+    #     set( ENV{LC_ALL} C )
 
         # Use `git describe --dirty` to create the KiCad version string.
-        execute_process(
-            COMMAND
-            ${GIT_EXECUTABLE} describe --dirty
-            WORKING_DIRECTORY ${_git_src_path}
-            OUTPUT_VARIABLE _git_DESCRIBE
-            ERROR_VARIABLE _git_log_error
-            RESULT_VARIABLE _git_log_result
-            OUTPUT_STRIP_TRAILING_WHITESPACE)
+        # execute_process(
+        #     COMMAND
+        #     ${GIT_EXECUTABLE} describe --dirty
+        #     WORKING_DIRECTORY ${_git_src_path}
+        #     OUTPUT_VARIABLE _git_DESCRIBE
+        #     ERROR_VARIABLE _git_log_error
+        #     RESULT_VARIABLE _git_log_result
+        #     OUTPUT_STRIP_TRAILING_WHITESPACE)
 
-        set( ENV{LC_ALL} ${_Git_SAVED_LC_ALL} )
-    endif( GIT_FOUND )
+        # set( ENV{LC_ALL} ${_Git_SAVED_LC_ALL} )
+    # endif( GIT_FOUND )
 
     # Check to make sure 'git' command did not fail.  Otherwise fallback
     # to KiCadVersion.cmake as the revision level.
-    if( _git_DESCRIBE )
-        set( KICAD_VERSION "(${_git_DESCRIBE})" )
-    endif()
+    # if( _git_DESCRIBE )
+        set( KICAD_VERSION "5.1.7" )
+    # endif()
 
 endmacro()
