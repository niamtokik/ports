$OpenBSD: patch-openbsd_OpenBSDProcessList_c,v 1.5 2021/03/29 17:18:43 sthen Exp $

Don't include "offline" CPUs in the stats (i.e. CPUs which have been
disabled by sysctl hw.smt=0).

https://github.com/htop-dev/htop/pull/580

Index: openbsd/OpenBSDProcessList.c
--- openbsd/OpenBSDProcessList.c.orig
+++ openbsd/OpenBSDProcessList.c
@@ -37,11 +37,15 @@ static int pageSize;
 static int pageSizeKB;
 
 ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidMatchList, uid_t userId) {
-   const int mib[] = { CTL_HW, HW_NCPU };
+   const int nmib[] = { CTL_HW, HW_NCPU };
+   const int mib[] = { CTL_HW, HW_NCPUONLINE };
    const int fmib[] = { CTL_KERN, KERN_FSCALE };
+   int ncmib[] = { CTL_KERN, KERN_CPUSTATS, 0 };
    int r;
+   unsigned int cpu_index_c = 0, ncpu;
    size_t size;
    char errbuf[_POSIX2_LINE_MAX];
+   struct cpustats cpu_stats;
 
    OpenBSDProcessList* opl = xCalloc(1, sizeof(OpenBSDProcessList));
    ProcessList* pl = (ProcessList*) opl;
@@ -54,6 +58,12 @@ ProcessList* ProcessList_new(UsersTable* usersTable, H
    }
    opl->cpus = xCalloc(pl->cpuCount + 1, sizeof(CPUData));
 
+   size = sizeof(int);
+   r = sysctl(nmib, 2, &ncpu, &size, NULL, 0);
+   if (r < 0) {
+      ncpu = pl->cpuCount;
+   }
+
    size = sizeof(fscale);
    if (sysctl(fmib, 2, &fscale, &size, NULL, 0) < 0) {
       CRT_fatalError("fscale sysctl call failed");
@@ -75,6 +85,18 @@ ProcessList* ProcessList_new(UsersTable* usersTable, H
    }
 
    opl->cpuSpeed = -1;
+
+   size = sizeof(cpu_stats);
+   for (unsigned int i = 0; i < ncpu; i++) {
+      ncmib[2] = i;
+      sysctl(ncmib, 3, &cpu_stats, &size, NULL, 0);
+      if (cpu_stats.cs_flags & CPUSTATS_ONLINE) {
+         cpu_index_c++;
+      }
+
+      if (cpu_index_c == pl->cpuCount)
+         break;
+   }
 
    return pl;
 }
